/******************************************************************************
*  Copyright 2017 - 2018, Opulinks Technology Ltd.
*  ---------------------------------------------------------------------------
*  Statement:
*  ----------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of Opulinks Technology Ltd. (C) 2018
******************************************************************************/

#ifndef _LE_HCI_H_
#define _LE_HCI_H_

#include "le.h"
#include "le_host.h"
#include "le_hci_event_types.h"
#include "le_hci_cmd_types.h"
#include "le_hci_if.h"


#define LE_HCI_CMD_ID_BASE			0x1000
#define LE_HCI_EVT_ID_BASE			0x1100


enum
{
	LE_HCI_MSG_INIT_COMPLETE_IND = LE_HCI_MSG_BASE,
	LE_HCI_MSG_ACL_MORE_DATA,
	LE_HCI_MSG_ENENTS_IND,
	LE_HCI_MSG_CMD_CFM,
	LE_HCI_MSG_CMD_COMPLETE_IND,
	LE_HCI_MSG_ACL_TX_COMPLETE_IND,
	
    LE_HCI_MSG_TOP
};

enum
{
	LE_HCI_EVT_DISCONNECTION_COMPLETE = LE_HCI_EVT_ID_BASE,
	LE_HCI_EVT_ENCRYPTION_CHANGE,
	LE_HCI_EVT_READ_REMOTE_VERSION_INFOMATION_COMPLETE,
	LE_HCI_EVT_COMMAND_COMPLETE,
	LE_HCI_EVT_COMMAND_STATUS,
	LE_HCI_EVT_HARDWARE_ERROR,
	LE_HCI_EVT_NUMBER_COMPLETED_PACKETS,
	LE_HCI_EVT_DATA_BUFFER_OVERFLOW,
	LE_HCI_EVT_ENCRYPTION_KEY_REFRESH_COMPLETE,
	LE_HCI_EVT_AUTHENTICATED_PAYLOAD_TIMEOUT_EXPIRED,
	LE_HCI_EVT_VENDOR_SPECIFIC,
	
	LE_HCI_EVT_CONNECTION_COMPLETE,
	LE_HCI_EVT_ADVERTISING_REPORT,
	LE_HCI_EVT_CONNECTION_UPDATE_COMPLETE,
	LE_HCI_EVT_READ_REMOTE_USED_FEATURES_COMPLETE,
	LE_HCI_EVT_LONG_TERM_KEY_REQUEST,
	LE_HCI_EVT_REMOTE_CONNECTION_PARAMETER_REQUEST,
	LE_HCI_EVT_DATA_LENGTH_CHANGE,
	LE_HCI_EVT_READ_LOCAL_P256_PUBLIC_KEY_COMPLETE,
	LE_HCI_EVT_GENERATE_DHKEY_COMPLETE,
	LE_HCI_EVT_ENHANCED_CONNECTION_COMPLETE,
	LE_HCI_EVT_DIRECT_ADVERTISING_REPORT,

	LE_HCI_EVT_PHY_UPDATE_COMPLETE,
	
	LE_HCI_EVT_ID_TOP
};

enum
{
	LE_HCI_DISCONNECT_REQ = LE_HCI_CMD_ID_BASE,
	LE_HCI_READ_REMOTE_VER_INFO_REQ,
	
	LE_HCI_SET_EVENT_MASK_REQ,
	LE_HCI_RESET_CONTROLLER_REQ,
	LE_HCI_READ_TX_POWER_REQ,
	LE_HCI_SET_EVENT_MASK_PAGE2_REQ,
	LE_HCI_READ_AUTH_PAYLOAD_TIMEOUT_REQ,
	LE_HCI_WRITE_AUTH_PAYLOAD_TIMEOUT_REQ,
	
	LE_HCI_READ_LOCAL_VERSION_INFO_REQ,
	LE_HCI_READ_LOCAL_SUPPORTED_CMD_REQ,
	LE_HCI_READ_LOCAL_SUPPORTED_FEATURE_REQ,
	LE_HCI_READ_BD_ADDR_REQ,
	
	LE_HCI_READ_RSSI_REQ,
    
	LE_HCI_LE_SET_EVENT_MASK_REQ,
	LE_HCI_LE_READ_BUFFER_SIZE_REQ,
	LE_HCI_LE_READ_LOCAL_SUPPORTED_FEATURES_REQ,
	LE_HCI_LE_SET_RANDOM_ADDRESS_REQ,
	LE_HCI_LE_SET_ADVERTISING_PARAMETERS_REQ,
	LE_HCI_LE_READ_ADVERTISING_CHANNEL_TX_POWER_REQ,
	LE_HCI_LE_SET_ADVERTISING_DATA_REQ,
	LE_HCI_LE_SET_SCAN_RESPONSE_DATA_REQ,
	LE_HCI_LE_SET_ADVERTISING_ENABLE_REQ,
	LE_HCI_LE_SET_SCAN_PARAMETERS_REQ,
	LE_HCI_LE_SET_SCAN_ENABLE_REQ,
    
	LE_HCI_LE_CREATE_CONNECTION_REQ,
	LE_HCI_LE_CREATE_CONNECTION_CANCEL_REQ,
	
	LE_HCI_LE_READ_WHITE_LIST_SIZE_REQ,
	LE_HCI_LE_CLEAR_WHITE_LIST_REQ,
	LE_HCI_LE_ADD_DEVICE_TO_WHITE_LIST_REQ,
	LE_HCI_LE_REMOVE_DEVICE_FROM_WHITE_LIST_REQ,
	
	LE_HCI_LE_CONNECTION_UPDATE_REQ,
	LE_HCI_LE_SET_HOST_CHANNEL_CLASSIFICATION_REQ,
	LE_HCI_LE_READ_CHANNEL_MAP_REQ,
	LE_HCI_LE_READ_REMOTE_USED_FEATURES_REQ,
	LE_HCI_LE_ENCRYPT_REQ,
	LE_HCI_LE_RAND_REQ,
	LE_HCI_LE_START_ENCRYPTION_REQ,
	LE_HCI_LE_LONG_TERM_KEY_REQUEST_REPLY_REQ,
	LE_HCI_LE_LONG_TERM_KEY_REQUEST_NEGATIVE_REPLY_REQ,
	LE_HCI_LE_READ_SUPPORTED_STATES_REQ,
	LE_HCI_LE_RECEIVER_TEST_REQ,
	LE_HCI_LE_TRANSMITTER_TEST_REQ,
	LE_HCI_LE_TEST_END_REQ,
	LE_HCI_LE_REMOTE_CONN_PARA_REQ_REPLY_REQ,
	LE_HCI_LE_REMOTE_CONN_PARA_REQ_NEGATIVE_REPLY_REQ,
	LE_HCI_LE_SET_DATA_LENGTH_REQ,						
	LE_HCI_LE_READ_SUGGESTED_DEFAULT_DATA_LENGTH_REQ,
	LE_HCI_LE_WRITE_SUGGESTED_DEFAULT_DATA_LENGTH_REQ,
	LE_HCI_LE_READ_LOCAL_P256_PUBLIC_KEY_REQ,
	LE_HCI_LE_GENERATE_DHKEY_REQ,
	
	LE_HCI_LE_ADD_DEVICE_TO_RESOLVING_LIST_REQ,
	LE_HCI_LE_REMOVE_DEVICE_FROM_RESOLVING_LIST_REQ,
	LE_HCI_LE_CLEAR_RESOLVING_LIST_REQ,
	LE_HCI_LE_READ_RESOLVING_LIST_SIZE_REQ,
	
	LE_HCI_LE_READ_PEER_RESOLVABLE_ADDRESS_REQ,
	LE_HCI_LE_READ_LOCAL_RESOLVABLE_ADDRESS_REQ,
	LE_HCI_LE_SET_ADDRESS_RESOLUTION_ENABLE_REQ,
	LE_HCI_LE_SET_RESOLVABLE_PRIVATE_ADDR_TIMEOUT_REQ,
	LE_HCI_LE_READ_MAX_DATA_LENGTH_REQ,

	LE_HCI_LE_READ_PHY_REQ,
    LE_HCI_LE_SET_DEFAULT_PHY_REQ,
    LE_HCI_LE_SET_PHY_REQ,

	LE_HCI_CMD_ID_TOP
};

enum
{
	LE_CTRL_LE_FEATURE_ENCRYPTION,
	LE_CTRL_LE_FEATURE_CONN_PARA_REQ_PROC,
	LE_CTRL_LE_FEATURE_EXTENDED_REJECT_IND,
	LE_CTRL_LE_FEATURE_SLAVE_INIT_FEATURE_EXCHANGE,
	LE_CTRL_LE_FEATURE_PING,
	LE_CTRL_LE_FEATURE_DATA_PACKET_LEN_EXTENSION,
	LE_CTRL_LE_FEATURE_PRIVACY,
	LE_CTRL_LE_FEATURE_EXTENDED_SCANNER_FILTER_POLICY,

	LE_CTRL_LE_FEATURE_TOP
};

typedef struct
{
    UINT8		hci_ver;
    UINT8		lmp_ver;
    UINT16		hci_rever;
    UINT16		lmp_subver;
    UINT16		mft_name;
	UINT8		le_feature[8];
	BD_ADDR		bd_addr;
    UINT8		wl_size;
    UINT8		rl_size;
    UINT16		conn_size;
} LE_HCI_MSG_INIT_COMPLETE_IND_T;

typedef struct
{
	UINT16		cmdId;
	UINT8		status;
	UINT8		len;
    UINT8		*data;
} LE_HCI_MSG_CMD_CFM_T;

typedef struct
{
	UINT16		cmdId;
	UINT8		status;
	UINT8		argLen;
    UINT8		*arg;
	UINT8		len;
    UINT8		*data;
} LE_HCI_MSG_CMD_COMPLETE_IND_T;

typedef struct
{
	UINT16		event;
	UINT8		*para;
} LE_HCI_MSG_ENENTS_IND_T;

typedef struct
{
	UINT16		handle;
	UINT8		pb;
	UINT8		bc;
    UINT16		len;
	UINT8		*data;
} LE_HCI_MSG_ACL_MORE_DATA_T;

typedef struct
{
	UINT16		handle;
    UINT16		len;
    void		*arg;
} LE_HCI_MSG_ACL_TX_COMPLETE_IND_T;


typedef void (*T_LeHciSendCmdMsgFp)(Task src, UINT16 cmdId, UINT8 paraLen, void *para);
typedef void* (*T_LeHciBuildAclTxCompleteIndFp)(UINT16 conn_hdl, UINT16 len, void *arg);
typedef LE_ERR_STATE (*T_LeHciSendDataFp)(Task src, UINT16 conn_hdl, UINT16 len, void *data);
typedef void (*T_LeHciBuildCmdStatusCfmFp)(Task src, UINT16 cmdId, UINT8 status, UINT8 dataLen, UINT8 *data);
typedef void (*T_LeHciBuildCmdCompleteIndFp)(Task src, UINT16 cmdId, UINT8 status, UINT8 dataLen, UINT8 *data, UINT16 argLen, UINT8 *arg);
typedef BOOL (*T_LeHciControllerLeFeatureSupportFp)(UINT16 capacity);
typedef UINT16 (*T_LeHciGetDevIdFp)(UINT16 conn_hdl);
typedef void (*T_LeHciInitFp)(Task cmTask);
typedef void (*T_LeHciPacketHandlerFp)(UINT16 pktLen, UINT8 *pkt);


extern T_LeHciSendCmdMsgFp LeHciSendCmdMsg;
extern T_LeHciBuildAclTxCompleteIndFp LeHciBuildAclTxCompleteInd;
extern T_LeHciSendDataFp LeHciSendData;
extern T_LeHciBuildCmdStatusCfmFp LeHciBuildCmdStatusCfm;
extern T_LeHciBuildCmdCompleteIndFp LeHciBuildCmdCompleteInd;
extern T_LeHciControllerLeFeatureSupportFp LeHciControllerLeFeatureSupport;
extern T_LeHciGetDevIdFp LeHciGetDevId;
extern T_LeHciPacketHandlerFp LeHciPacketHandler;
extern T_LeHciInitFp LeHciInit;

#endif
